%{
#include<ctype.h>
%}
%token DIGIT
%%
line : expr'\n'{printf("\n%d\n",$1);}
;
exp : expr'+' term{$$ =$1+$3;}
|term
;
term : term '*'factor{$$=$1 *$3;}
|factor
;
factor : '('expr')'{$$=$2;}
| DIGIT
;
%%
yylex()
{
int c;
c=getchar();
if(isdigit(c))
{
yylval=c-'0';
return DIGIT;
}
return c;
}
main()
{
yyparse();
return 0;
}
yyerror(const char *msg)
{
printf("\n%s\n", msg);
}
OUTPUT:
[root@localhost]# lex codegen.l
[root@localhost]# yacc –d codegen.y
[root@localhost]# cc lex.yy.c y.tab.c –ll -lm
[root@localhost]# ./a.out