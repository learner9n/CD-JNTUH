# -*- coding: utf-8 -*-
"""ml lab 1 2  3 4 5programs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14rjKOOLCkyAz5noJr6TFKxkj2eN1dXtx
"""

# &#39;&#39;&#39; Aim : The probability that it is Friday and that a student is absent is
#3 %. Since there are 5 school days in a week, the probability that it is
#Friday is 20 %. What is the probability that a student is absent given that
#today is Friday? Apply Bayeâ€™s rule in python to get the result.
paf=0.03
print("The probability that it is Friday and that a student is absent",paf)
pf=0.2
print("the probability that it is friday :",pf);
presult=paf/pf
print("the probability that student is absent and it is friday:",presult*100,"%")

"""2) sql

Aim
Extract data from a MySQL database using Python.

Steps
1)Create a Table in MySQL Database

a. Open Command Prompt and enter MySQL prompt:

mysql -u root -p

b. Execute the following commands at the MySQL prompt to create the database and table:

create database SampleDB;
use SampleDB;
CREATE TABLE students (sid VARCHAR(10), sname VARCHAR(10), age INT);
INSERT INTO students VALUES ('s521', 'John Bob', 23);
INSERT INTO students VALUES ('s522', 'Dilly', 22);
INSERT INTO students VALUES ('s523', 'Kenney', 25);
INSERT INTO students VALUES ('s524', 'Herny', 26);

2)Install mysql.connector package

a. Open Command Prompt and install the package:

For Windows:

pip install mysql-connector-python

For Linux:

sudo apt-get install python3-mysql.connector

3)Python Source Code to Extract Data
"""

import mysql.connector

# Connect to the database
conn = mysql.connector.connect(
    host='localhost',
    user='root',
    password='your_password',
    database='SampleDB'
)
cur = conn.cursor()

# Execute a query to fetch data from the table
cur.execute("SELECT * FROM students")
result = cur.fetchall()

# Print the results
print("Student Details are:")
for x in result:
    print(x)

# Close the connection
cur.close()
conn.close()

import sqlite3

# Connect to the database
conn = sqlite3.connect("student.db")
cur = conn.cursor()

# Uncomment the line below if the table does not exist already
# cur.execute("CREATE TABLE studentf (sid varchar(20), sname varchar(10), age int)")

# Insert data into the table
cur.execute("INSERT INTO studentf (sid, sname, age) VALUES (528, 'v', 32)")
cur.execute("INSERT INTO studentf (sid, sname, age) VALUES (529, 'A', 21)")
cur.execute("INSERT INTO studentf (sid, sname, age) VALUES (530, 'B', 22)")
cur.execute("INSERT INTO studentf (sid, sname, age) VALUES (531, 'C', 23)")

# Select all records from the table
cur.execute("SELECT * FROM studentf")
result = cur.fetchall()

# Print the results
print("Student Details are:")
for x in result:
    print(x)

# Commit the changes and close the connection
conn.commit()
conn.close()

"""3) KNN

"""

# Import necessary modules
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import random
# Loading data
data_iris = load_iris()
# To get list of target names
label_target = data_iris.target_names
print()
print("Sample Data from Iris Datase")
print("*"*30)
# to display the sample data from the iris dataset
for i in range(10):
    rn = random.randint(0,120)
    print(data_iris.data[rn],"==&gt;",label_target[data_iris.target[rn]])
# Create feature and target arrays
X = data_iris.data
y = data_iris.target
# Split into training and test set
X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size = 0.3, random_state=1)
print("The Training dataset length: ",len(X_train))
print("The Testing dataset length: ",len(X_test))
try:
    nn = int(input("Enter number of neighbors :"))
    knn = KNeighborsClassifier(nn)
    knn.fit(X_train, y_train)

# to display the score
    print("The Score is :",knn.score(X_test, y_test))
# To get test data from the user
    test_data = input("Enter Test Data :").split(",")
    for i in range(len(test_data)):
        test_data[i] = float(test_data[i])
        print()
        v = knn.predict([test_data])
        print("Predicted output is :",label_target[v])
except:
    print("Please supply valid input......")

"""4th clustering"""

from sklearn.cluster import KMeans
import numpy as np

X = np.array([[1.713, 1.586], [0.180, 1.786], [0.353, 1.240],
              [0.940, 1.566], [1.486, 0.759],
              [1.266, 1.106], [1.540, 0.419], [0.459, 1.799], [0.773, 0.186]])
y = np.array([0, 1, 1, 0, 1, 0, 1, 1, 1])

kmeans = KMeans(n_clusters=3, random_state=0).fit(X)

print("The input data is ")
print("VAR1 \t VAR2 \t CLASS")
for i, val in enumerate(X):
    print(f"{val[0]:.3f}\t{val[1]:.3f}\t{y[i]}")
print("=" * 20)

# To get test data from the user
print("The Test data to predict ")
test_data = []
VAR1 = float(input("Enter Value for VAR1: "))
VAR2 = float(input("Enter Value for VAR2: "))
test_data.append([VAR1, VAR2])  # Append as a list of lists to create a 2D array

print("=" * 20)
print("The predicted Class is: ", kmeans.predict(test_data)[0])

"""5)"""

total_Records = 10
numGolfRecords = 4
unConditionalprobGolf = numGolfRecords / total_Records
print("Unconditional probability of golf: {}".format(unConditionalprobGolf))

# Conditional probability of 'single' given 'medRisk'
numMedRiskSingle = 2
numMedRisk = 3
probMedRiskSingle = numMedRiskSingle / total_Records
probMedRisk = numMedRisk / total_Records
conditionalProb = probMedRiskSingle / probMedRisk
print("Conditional probability of single given medRisk: {}".format(conditionalProb))