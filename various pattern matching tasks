16. create programs in lex fro various pattern matching tasks
%{
#include <stdio.h>
#include <string.h>
%}

EMAIL [a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}

%%
if      { printf("Keyword: if\n"); }
else    { printf("Keyword: else\n"); }
while   { printf("Keyword: while\n"); }
int     { printf("Keyword: int\n"); }
float   { printf("Keyword: float\n"); }
double  { printf("Keyword: double\n"); }
[a-zA-Z][a-zA-Z0-9_]* { printf("Identifier: %s\n", yytext); }
[0-9]{4}-[0-9]{2}-[0-9]{2}  { printf("Date: %s\n", yytext); }
{EMAIL}   { printf("Email found: %s\n", yytext); }
[ \t\n]    ; // skip whitespace
.          ; // skip other characters
%%

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <input_file>\n", argv[0]);
        return 1;
    }

    FILE* fp = fopen(argv[1], "r");
    if (!fp) {
        perror("Error opening file");
        return 1;
    }

    yyin = fp;
    yylex();
    fclose(fp);

    return 0;
}


OUTPUT:
admin-cse@cse:~$ vim pat.l
admin-cse@cse:~$ lex pat.l
admin-cse@cse:~$ gcc lex.yy.c -lfl -o a.out
admin-cse@cse:~$ ./a.out input_file.txt
Identifier: Dates
Date: 2023-12-31
Identifier: and
Date: 2024-01-01
